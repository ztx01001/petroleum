server.port=8080
spring.resources.static-locations=classpath:/templates/,classpath:/static/
#jdbc
#spring.datasource.url=jdbc:mysql://localhost:3306/oil?useUnicode=true&characterEncoding=utf-8&useSSL=false&serverTimezone=UTC
spring.datasource.url=jdbc:mysql://localhost:3306/oil?useUnicode=true&characterEncoding=utf-8&useSSL=false&serverTimezone=Asia/Shanghai
spring.datasource.username=root
spring.datasource.password=Database@616
spring.datasource.driver-class-name=com.mysql.jdbc.Driver
#influxdb grafana admin admin@1qaz2wsx
spring.influxdb.user=admin
spring.influxdb.password=admin@1qaz2wsx
spring.influxdb.url=http://localhost:8086
spring.influxdb.database=petroleum
#tcp
spring.tcp.host=180.201.147.253
spring.tcp.port=8888
spring.tcp.request=010300000040443A
#serial
spring.serial.com=COM4
#data export temp path
spring.export.csvpath=./export
spring.export.pyodpath=./export/pyod
spring.export.pyodfile=pyoddata
spring.export.sarimapath=./export/sarima
spring.export.sarimafile=sarimadata
spring.export.autoarimapath=./export/autoarima
spring.export.autoarimafile=autoarimadata
###########【Kafka集群】###########180.201.147.121:9092
spring.kafka.bootstrap-servers=192.168.1.102:9092

###########【初始化生产者配置】###########
# 重试次数
spring.kafka.producer.retries=0
# 应答级别:多少个分区副本备份完成时向生产者发送ack确认(可选0、1、all/-1)
spring.kafka.producer.acks=1
# 批量大小
spring.kafka.producer.batch-size=16384
# 提交延时
spring.kafka.producer.properties.linger.ms=0
# 当生产端积累的消息达到batch-size或接收到消息linger.ms后,生产者就会将消息提交给kafka
# linger.ms为0表示每接收到一条消息就提交给kafka,这时候batch-size其实就没用了

# 生产端缓冲区大小
spring.kafka.producer.buffer-memory = 33554432
# Kafka提供的序列化和反序列化类
spring.kafka.producer.key-serializer=org.apache.kafka.common.serialization.StringSerializer
spring.kafka.producer.value-serializer=org.apache.kafka.common.serialization.StringSerializer
# 自定义分区器
# spring.kafka.producer.properties.partitioner.class=com.felix.kafka.producer.CustomizePartitioner
​
###########【初始化消费者配置】###########
# 默认的消费组ID
spring.kafka.consumer.properties.group.id=defaultConsumerGroup
# 是否自动提交offset
spring.kafka.consumer.enable-auto-commit=true
# 提交offset延时(接收到消息后多久提交offset)
spring.kafka.consumer.auto.commit.interval.ms=1000
# 当kafka中没有初始offset或offset超出范围时将自动重置offset
# earliest:重置为分区中最小的offset;
# latest:重置为分区中最新的offset(消费分区中新产生的数据);
# none:只要有一个分区不存在已提交的offset,就抛出异常;
spring.kafka.consumer.auto-offset-reset=latest
# 消费会话超时时间(超过这个时间consumer没有发送心跳,就会触发rebalance操作)
spring.kafka.consumer.properties.session.timeout.ms=120000
# 消费请求超时时间
spring.kafka.consumer.properties.request.timeout.ms=180000
# Kafka提供的序列化和反序列化类
spring.kafka.consumer.key-deserializer=org.apache.kafka.common.serialization.StringDeserializer
spring.kafka.consumer.value-deserializer=org.apache.kafka.common.serialization.StringDeserializer
# 消费端监听的topic不存在时，项目启动会报错(关掉)
spring.kafka.listener.missing-topics-fatal=false
# 设置批量消费
# spring.kafka.listener.type=batch
# 批量消费每次最多消费多少条消息
# spring.kafka.consumer.max-poll-records=50

#log
#设置日志级别
#logging.level.root=INFO
#logging.path=E:/eclipsespace/springboot-petroleum/logs
#logging.file=petroleum.log
# 日志文件大小
#logging.file.max-size=100MB
# 保留的日志时间
#logging.file.max-history=4
# 修改在控制台输出的日志格式
#logging.pattern.console=%d{yyyy-MM-dd HH:mm:ss} %-5level [%thread] %logger : %msg%n
# 修改输出到文件的日志格式
#logging.pattern.file=%d{yyyy-MM-dd HH:mm:ss.SSS} %-5level [%thread] %logger : %msg%n
# 配置邮件服务器的地址
spring.mail.host=smtp.qq.com
# 配置邮件服务器的端口（465或587）
spring.mail.port=465
# 配置用户的账号
spring.mail.username=460147479@qq.com
# 配置用户的密码（即上面我们申请到的授权码）
spring.mail.password=wxnedyednolzbgbb
# 配置默认编码
spring.mail.default-encoding=UTF-8
# SSL 连接配置
spring.mail.properties.mail.smtp.socketFactory.class=javax.net.ssl.SSLSocketFactory
# 开启 debug，这样方便开发者查看邮件发送日志
spring.mail.properties.mail.debug=true
